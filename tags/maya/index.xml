<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maya on Shih-Chin</title>
    <link>http://shihchinw.github.io/tags/maya.html</link>
    <description>Recent content in Maya on Shih-Chin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© Shih-Chin</copyright>
    <lastBuildDate>Sun, 22 Feb 2015 16:39:00 +0000</lastBuildDate>
    
	<atom:link href="http://shihchinw.github.io/tags/maya/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Render Tips for Arnold in Maya</title>
      <link>http://shihchinw.github.io/2015/02/render-tips-for-arnold-in-maya.html</link>
      <pubDate>Sun, 22 Feb 2015 16:39:00 +0000</pubDate>
      
      <guid>http://shihchinw.github.io/2015/02/render-tips-for-arnold-in-maya.html</guid>
      <description>&lt;p&gt;All photo-realistic ray-tracers are trying to solve the &lt;a href=&#34;http://www.wired.com/2010/07/st_equation_3danimation/&#34;&gt;rendering equation&lt;/a&gt;. Although they are all categorized as ray-tracer instead of rasterizer, the infrastructure of each implementations are quite different (i.e. uni-directional vs. bi-directional, pure path tracing vs. works with photon-map or &lt;a href=&#34;http://cgg.mff.cuni.cz/~jaroslav/papers/2008-irradiance_caching_class/&#34;&gt;irradiance caching&lt;/a&gt;, etc).&lt;/p&gt;

&lt;p&gt;Arnold is an &lt;em&gt;un-bias uni-directional path tracer&lt;/em&gt; with a remarkable importance sampling mechanism and great memory management to achieve amazing performance excellence. However, if we blindly increase the number of ray samples for every render scene, we would not always get a cleaner imagery. Which means that when we switch from one ray-tracer to another, we had better use different strategies to adjust render settings. Here is the summary about what I&amp;rsquo;ve learned from experience, hope it would help any Arnold user. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building AbcExport/AbcImport on Windows</title>
      <link>http://shihchinw.github.io/2013/06/building-abcexport-abcimport-on-windows.html</link>
      <pubDate>Sat, 01 Jun 2013 10:25:00 +0000</pubDate>
      
      <guid>http://shihchinw.github.io/2013/06/building-abcexport-abcimport-on-windows.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/alembic/&#34;&gt;Alembic&lt;/a&gt; is a popular data format for geometry cache nowadays, however, there are no simple workflow to build the AbcImport/AbcExport on windows. In this post, I tried to demonstrate a building flow as simple as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/file/d/0B3FnMqIdd-iLN0czVE1mTl9oWUE/edit?usp=sharing&#34;&gt;Here&lt;/a&gt; is the pre-built binaries for Maya 2013 x64.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building PySide for Maya 2012 on Windows</title>
      <link>http://shihchinw.github.io/2012/05/building-pyside-for-maya-2012-on-windows.html</link>
      <pubDate>Sun, 27 May 2012 00:26:00 +0000</pubDate>
      
      <guid>http://shihchinw.github.io/2012/05/building-pyside-for-maya-2012-on-windows.html</guid>
      <description>&lt;p&gt;One of my friend received some tools developed in PySide for Maya recently. He tried to copy the latest pre-built binaries of PySide into Maya&amp;rsquo;s site-packages but got an import error. Therefore, we have to build the PySide for Maya from the ground up and this post is about the entire building process we&amp;rsquo;ve been through. Hope this note might be helpful for people who want to use PySide in Maya. :)&lt;/p&gt;

&lt;p&gt;BTW, the PySide for Maya 2012 built by vc9 can be downloaded &lt;a href=&#34;https://docs.google.com/open?id=0BwFItFJF_4j3Wm1kMDVXcWIxbW8&#34;&gt;here&lt;/a&gt;, enjoy it!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>